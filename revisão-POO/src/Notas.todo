Poo

☐ POO é um paradigma de programação, baseado no conceito de "objetos", que podem conter dados na forma de campos, também conhecidos como atributos, e códigos, na forma de procedimentos, também conhecidos como métodos.

☐ Retiramos os paradigmas de acordo com o cenário do mundo real

Classes

☐ A classe pode ser considerada a planta de uma casa

☐ O identificador é o nome do objeto que deve ser bem claro para sua identificação

☐ Caracteristicas são as suas caracteristicas que podemos obter de qualquer objeto ex carro: cor, marca, tipo

☐ comportamentos são as ações que o objeto realiza, ex carro: acelerar, frear, buzinar

☐ instanciar é o ato de criar o novo objeto com as caracteristicas ja pre estabelecidas

CONVENÇÃO DO CADASTRO DE CLASSES 
☐ Classe de modelo (model): classes que representam estrutura de domínio da aplicação, exemplo: Cliente, Pedido, Nota Fiscal e etc.

☐ Classe de serviço (service): classes que contém regras de negócio e validação de nosso sistema.

☐ Classe de repositório (repository): classes que contém uma integração com banco de dados.

☐ Classe de controle (controller): classes que possuem a finalidade de disponibilizar alguma comunicação externa, à nossa aplicação, como http web ou webservices.

☐ Classe utilitária (util): classe que contém recursos comuns, à toda nossa aplicação.


Pacotes 
☐ Utilizamos os caminhos de pastas para organizar o projeto de acordo com suas particularidades

☐ por boas práticas utilizamos as classes de acordo com o ramo de atividade da empresa ex empresa Power Soft: Comercial : com.powersoft; Governamental : gov.powersoft; Código aberto: org.powersoft.

☐ model : Classes que representam a camada e modelo da aplicação : Cliente, Pedido, NotaFiscal, Usuario;

☐ repository: Classes ou interfaces que possuem a finalidade de interagir com tabelas no banco de dados: ClienteRepository;
 
☐ service: Classes que contém regras de negócio do sistema : ClienteService possui o método validar o CPF, do cliente cadastrado;
 
☐ controller: Classes que possuem a finalidade de, disponibilizar os nossos recursos da aplicação, para outras aplicações via padrão HTTP;
 
☐ view: Classes que possuem alguma interação, com a interface gráfica acessada pelo usuário;
 
☐ util: Pacote que contém, classes utilitárias do sistema: FormatadorNumeroUtil, ValidadorUtil.



<h1> visibilidade de recursos</h1>

☐ Public fica visivel para todos os pacotes da aplicação

☐ DEFAUT fica visivel apenas para os arquivos do mesmo pacote/diretório

☐ PRIVATE so fica disponivel para o mesmo arquivo


GETTERS E SETTERS 

☐ CHAMA SE CONVENÇÕES JAVA BEANS

☐ os metodos tem que ter suas variaveis privadas

☐ Método get obtem o valor atual do atibuto presisa ser public e troenar um tipo correspondente ao valor

☐ O método set fica responsável por definir ou modificar o valor de um atributo ou variavel precisa ser public vai receber o parameto do mesmo tipo da variável mas nao retorna nenhum valor


CONSTRUTORES

☐ SÁO  a base do objeto e nele podemos criar um parametro sem utilizar o getter e settrer e no momento da criação do objeto ja passaremos como parametro algo que são imutaveis ou essenciais


ENUMS

☐ Enum, é um tipo especial de classe, onde os objetos são previamente criados, imutáveis e disponíveis por toda aplicação.